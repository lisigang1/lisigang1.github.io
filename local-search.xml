<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Promise</title>
    <link href="undefined2019/09/17/promise/"/>
    <url>2019/09/17/promise/</url>
    
    <content type="html"><![CDATA[<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="一、什么是promise"><a href="#一、什么是promise" class="headerlink" title="一、什么是promise"></a>一、什么是promise</h2><p>ES6 语法规范中新加的内置类，用来处理 js 中异步编程的，而我们所谓的 Promise 设计模式，就是基于 promise 对异步操作进行管理<br>promose 是一个内置类，所以创建一个 promise：new Promise([executor]): 第一个执行函数必须传递，这里的 executor 是一个回调函数下面简称 exe<br>new promise 的时候就会把 exe 执行，创建 promise 的一个实例（exe 是 promise 类的一个回调函数，promise 内部会把它执行）<br>promise 不仅把 exe 执行，而且还给 exe 传递两个参数（两个参数也是函数类型）<br>resolve 函数：它执行代表 promise 处理的异步事情是成功的，把 promise 的状态改为 fulfilled<br>reject 函数：它执行代表 promise 处理的异步事情是失败的，把 promise 的状态改为 rejected<br>exe 函数中放的就是当前要处理的异步操作事情<br>let promiseExamp = new Promise((resolve, reject) =&gt; {这里一般存放的都是我们即将要处理的异步任务，任务成功我们执行 resolve,任务失败我们执行 reject（当然写同步的也可以）}<br>promise执行具体细节<br>举个例子：</p><h2 id="二、异步编程中的回调地狱"><a href="#二、异步编程中的回调地狱" class="headerlink" title="二、异步编程中的回调地狱"></a>二、异步编程中的回调地狱</h2><p>一个回调函数嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数再嵌一个回调函数… 就是回调地狱。<br>一个小例子：<br>从服务器获取某个学生的基本信息 （score-id） -&gt; 基于分数的 ID 获取到当前学生各项成绩 -&gt; 基于某一项成绩获取他在学校的排名</p><ol><li>AJAX 的串行<br>只有第一个请求成功才能执行第二个，第二个成功才能执行第三个，最后一个请求成功后拿到了每一次请求的所有数据。</li><li>AJAX 的并行<br>三个请求可以同时发送，但是需要等到所有请求都成功才会做一件事</li><li>解决AJAX的回调地狱</li><li>解决AJAX的并行<h2 id="三、then"><a href="#三、then" class="headerlink" title="三、then"></a>三、then</h2></li><li>什么是then<br>Promise.prototype 上面有 then 的方法<br>then: 设置成功或者失败后执行的方法（成功或者失败都可以设置，也可以只设置一个）<br>pro.then ([success],[error])<br>pro.then ([success]，null)<br>pro.then (null,[error])<br>catch: 设置失败后执行的方法<br>finally: 设置不论成功还是失败都会执行的方法（一般不用）</li><li>then链<br>执行 then / catch / finally 返回的结果是一个全新的 promise 实例，所以可以链式写下去；下一个 then 中哪个方式会被执行，由上一个 then 中某个方法执行的结果来决定<br>上一个 then 中某个方法的返回值会传递给下一个 then 的某个方法中<br>如果当前 promise 实例的状态确定后，都会到对应的 then 中找方法，如果 then 中没有对应的这个方法，则会向下顺延<br>then 方法中如果返回的是一个 promise 实例，则当前返回实例的成功或者失败状态，影响着下一个 then 中哪个方法会被触发执行；如果返回的是非 promise 实例，则看当前方法执行是否报错，来决定下一个 then 中哪个方法执行；</li><li>promise.all<br>Promise.all([promise1, promise2,…])：all 中存放的是多个 promise 实例（每一个实例管理者一个异步操作），执行 all 方法返回的结果是一个新的 promise 实例 “PROA”<br>当所有 promise 实例的状态都为 Fulfilled 的时候（成功），让 PROA 的状态也变为 Fulfilled，并且把所有    promise 成功获取的结果，存储为成为一个数组（顺序和最开始编写的顺序一致）“result=[result1,result2,…]”，让 PROA 这个数组的 value 值等于这个数组<br>都成功（PROA 状态是 fulfilled）才会通知 then 中第一个方法执行，只要有一个失败（PROA 状态是 recected），就会通知 then 中第二个方法或者 catch 中的方法执行<h2 id="四、axios"><a href="#四、axios" class="headerlink" title="四、axios"></a>四、axios</h2>axios：一款基于 promise 设计模式封装的 AJAX 库（JQ 中的 AJAX 就是最普通的 AJAX 库，没有基于 promise 管理）<br>axios.post([URL], [DATA], [OPTIONS])：DATA 通过请求主传递给服务器的内容</li><li>options<br>options 的参数<br>baseURL：基础的URL路径<br>transformRequest：处理请求参数（对POST系列有作用）<br>transformResponse：把返回的结果进行处理<br>params：GET 系列请求传递给服务器的内容（会把 PARAMS 中的内容拼接为 X-WWW-FORM-URLENCODED 这种格式，基于 URL 问号传参传递给服务器）<br>paramsSerializer：传递参数的序列化<br>timeout：超时时间<br>withCredentials：跨域请求中是否允许携带凭证<br>responseType：预设服务器返回结果的格式，默认是 JSON，支持 BUFFER / TEXT / STREAM / DOCUMENT…<br>validateStatus：AXIOS 本身只有在 HTTP 状态码以2开头的时候才认为是成功，其余都认为是失败状态，当然我们可以自己来设置，基于 validateStatus 这个来修改</li><li>如何使用axios<br>在使用 AXIOS 之前，我们一般都需要配置默认的配置项<br>基础 URL，后期再发送请求的时候，URL 请求地址最前面的公共部分就不需要再写了<br>跨域请求中允许携带资源凭证（例如 COOKIE 信息）<br>设置请求头:POST 系列中，我们传递给服务器数据的格式一般以 x-www-form-urlencoded 格式为主<br>设置请求拦截器（只对 POST 系列有用）：把基于请求主体传递给服务器的内容进行拦截，把内容格式变为 x-www-form-urlencoded 这种格式，再传递给服务器<br>设置响应拦截器：[成功状态]把从服务器获取的结果中的响应主体信息获取到即可，[失败状态]手动把错误信息抛出异常<br>配置什么才算成功（把 PROMISE 状态改为 FULFILLED）<h2 id="五、跨域"><a href="#五、跨域" class="headerlink" title="五、跨域"></a>五、跨域</h2></li><li>什么是同源策略？<br>同源策略(Same-origin Policy)：为了保证浏览器的信息安全，浏览器采用同源策略，保证当前源中的资源只能在当前的源中使用；其他源如果需要使用当前源资源，需要特殊技术，这种 A 源访问 B 源的资源的通信称为跨域；<br>示例：<br>以上请求会报错：<br>当出现以上错误时说明你正在进行一个跨域的操作；</li><li>同源策略的要求：<br>同源策略要求通信的两个源的协议、域名、端口号要相同，如果三者中任意一个不同就是不满足同源策略；不满足同源策略的通信就是跨域；</li><li>常用的跨域解决方案：<br>JSONP<br>服务端转发，因为同源策略只在客户端存在，在服务端是不存在的；所以可以由服务端转发请求；<br>nginx 转发，nginx 是服务器应用程序，它可以接受客户端的请求，然后根据规则可以配置自动转发；<br>CORS: Cross-Origin-Resource-Sharing: 需要目标域设置 Access-Control-Allow-Origin 头信息；</li><li>JSONP<br>JSONP 是一种常用的解决跨域的方式；<br>原理：利用 script 的 src 属性是不受同源策略约束的，可以访问不同服务器或者端口号下的数据<br>提前声明一个叫做 fn 的函数，给 fn 设置一个形参；<br>在页面给 script 的 src 的指向的路径拼接一个 callback 属性，callback=fn；当浏览器解析到这个 script 标签时，会向 src 指向的路径发起 http 请求；<br>服务器收到这个请求后，会返回一个 fn (这里面是服务器返回的数据)<br>fn({xxx}) 这个是让 fn 执行，小括号里面就是服务器发送给我们的数据</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2019/09/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>2019/09/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器渲染的重排与重绘以及前端性能优化"><a href="#浏览器渲染的重排与重绘以及前端性能优化" class="headerlink" title="浏览器渲染的重排与重绘以及前端性能优化"></a>浏览器渲染的重排与重绘以及前端性能优化</h1><h2 id="细说浏览器渲染的重排与重绘"><a href="#细说浏览器渲染的重排与重绘" class="headerlink" title="细说浏览器渲染的重排与重绘"></a>细说浏览器渲染的重排与重绘</h2><blockquote><p>前端性能优化因为涉及到计算机网络、数据算法、图形图像处理、浏览器渲染等多方面计算机知识，常作为前端工程师乐此不疲的技术讨论话题，也正因如此，它也是面试时容易被问及的面试题之一。</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>URL从输入到页面展示的过程</li><li>DOM和JavaScript的关系</li><li>为什么操作DOM会很“慢”</li><li>浏览器解析HTML的过程</li><li>重排</li><li>重绘</li><li>优化方案</li></ul><h3 id="URL从输入到页面展示的过程"><a href="#URL从输入到页面展示的过程" class="headerlink" title="URL从输入到页面展示的过程"></a>URL从输入到页面展示的过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在探讨浏览器解析html之前，先了解url从输入到最后页面渲染的过程是一个很有必要的步骤，它可以帮助我们把握整体流程，让我们在了解HTML解析细节之前知道它处于整个请求周期中的哪一阶段，这对我们构建完善知识图谱很有帮助。</span><br></pre></td></tr></table></figure><p>首先，我们假设输入的url的请求为最简单的Http请求，以GET请求为例，大致分以下几个步骤：</p><h5 id="1-用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。"><a href="#1-用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。" class="headerlink" title="1. 用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。"></a>1. 用户在浏览器的地址栏输入访问的URL地址。浏览器会先根据这个URL查看浏览器缓存-系统缓存-路由器缓存，若缓存中有，直接跳到第6步操作，若没有，则按照下面的步骤进行操作。</h5><h5 id="2-浏览器根据输入的URL地址解析出主机名。"><a href="#2-浏览器根据输入的URL地址解析出主机名。" class="headerlink" title="2. 浏览器根据输入的URL地址解析出主机名。"></a>2. 浏览器根据输入的URL地址解析出主机名。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;  URI（Uniform Resource Identifier / 统一资源标志符）  包含url和urn</span><br><span class="line">URL（Uniform Resource Locator / 统一资源定位符）</span><br><span class="line">URN（Uniform Resource Name / 统一资源名称）国际统一发版编号（使用率极低）</span><br><span class="line">URL    https://mbd.baidu.com:80/newspage/data/landingsuper?context=%7B&quot;nid&quot;%3A&quot;news_9461431018812454469&quot;%7D&amp;n_type=0&amp;p_from=1#ee23</span><br></pre></td></tr></table></figure><ul><li>协议 http://<ul><li>能够把客户端和服务器端通信的信息进行传输的工具<ul><li>HTTP 超文本传输协议</li><li>HTTPS 为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密</li><li>FTP 文件传输协议（应用于资源的下载和上传）</li></ul></li></ul></li><li>域名：mbd.baidu.com：一个让用户方便记忆的名称（不通过域名，直接用服务器的外网ip）（.com /.cn/.com.cn/.edu/.io/.gov/.org/.net<ul><li>顶级域名 baidu.com</li><li><a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a> 1级域名</li><li>music.baidu.com 2级域名</li><li>kbs.music..baidu.com 3级域名</li></ul></li><li>端口号： :80 (0-65535)<ul><li>用端口号区分同一台服务器上不同的项目,如果项目采用的就是默认端口号，书写地址可以不用加端口号，浏览器再发送请求的时候会默认添加端口号。<ul><li>http 80</li><li>https 443</li><li>ftp 21</li></ul></li></ul></li><li>请求资源路径名称：/newspage/data/landingsuper<ul><li>默认路径或名称 xxx.com/ 没写路径的话找默认资源，可以在服务器自己配置一般默认资源名称default.html</li><li>伪URL地址处理（URL重写为了增加seo搜索引擎优化，动态的网址一般不会被搜索引擎收录，所以我们把动态的网址静态化，需要重写url</li></ul></li><li>问号传参信息: ?context=%7B”nid”%3A”news_9461431018812454469”%7D&amp;n_type=0&amp;p_from=1<ul><li>客户端把信息传递给服务器方式<ul><li>url地址问号传参</li><li>请求报文传输</li></ul></li><li>实现不同页面之间的信息交互 列表到详情</li></ul></li><li>HASH值 #ee23<ul><li>信息传输</li><li>锚点定位</li><li>基于HASH实现路由管控，不同的HASH值展示不同的组件和模块。</li></ul></li></ul><p>请求的地址中如果出现UNICODE编码内容，现代版浏览器会默认的进行编码<br>\1. 基于encodeURI编码，我们可以基于decodeURI解码，编码的是整个URL，这样整个URL中的特殊字符都会自动编译，<br>\2. encodeURIComponent/decodeURIComponent,是对URL的部分信息编码，一般是？后的信息编码。客户端和服务器端进行信息传输的时候，如果需要把请求的信息编码，要基于这两种赋值，进行统一编码解码。<br>\3. 客户端还存在针对中文的编码方式escape/unescape 后台不一定有，一般应用于客户端页面之间自己的处理。例如从列表跳转到详情，可以把传递的中文信息基于这个编码，详情页面获取编码后的信息再解码。各种客户端中的cookie信息，如果信息是中文，我们也基于这种办法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//=&gt;基于JS实现页面跳转link.onclick = function () &#123;//=&gt;获取当前页面的URL地址let url = window.location.href;//=&gt;跳转页面window.location.href = &quot;http://www.zhufengpeixun.cn/stu/?from=&quot; + encodeURIComponent(url);// window.open(&quot;http://www.zhufengpeixun.cn/&quot;);&#125;</span><br></pre></td></tr></table></figure><h5 id="3-浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip-如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考https-www-cnblogs-com-xsilence-p-6035559-html"><a href="#3-浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip-如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考https-www-cnblogs-com-xsilence-p-6035559-html" class="headerlink" title="3. 浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip,如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考https://www.cnblogs.com/xsilence/p/6035559.html"></a>3. 浏览器将主机名转换成服务器ip地址。浏览器先查找本地DNS缓存列表，看缓存里面是否存在这个ip,如果有则进入第4步，如果缓存中不存在这个ip地址，就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中。更详细步骤参考<a href="https://www.cnblogs.com/xsilence/p/6035559.html" target="_blank" rel="noopener">https://www.cnblogs.com/xsilence/p/6035559.html</a></h5><blockquote><p>在服务器上存储着 域名 –服务器外网IP ,对DNS发送请求，进行DNS解析过程即：根据域名，在DNS服务器上查找到对应服务器的外网IP</p></blockquote><p>DNS优化</p><ul><li><p>缓存 浏览器会在第一次解析后，默认建立缓存，时间为1min</p></li><li><p>减少DNS解析次数，一个网站中我们需要发送请求的域名和服务器尽可能减少</p></li><li><p>DNS预获取，dns-prefetch: 在页面加载开始的时候，就把当前页面中需要访问其他域名（服务器）的信息进行提前dns解析，以后加载到具体内容部分可以不用解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//static.360buyimg.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//misc.360buyimg.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img10.360buyimg.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img11.360buyimg.com&quot;&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//img12.360buyimg.com&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-拿到ip地址后，浏览器再从URL中解析出端口号。"><a href="#4-拿到ip地址后，浏览器再从URL中解析出端口号。" class="headerlink" title="4. 拿到ip地址后，浏览器再从URL中解析出端口号。"></a>4. 拿到ip地址后，浏览器再从URL中解析出端口号。</h5><h5 id="5-拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。"><a href="#5-拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。" class="headerlink" title="5. 拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。"></a>5. 拿到ip和端口后，浏览器会建立一条与目标Web服务器的TCP连接，也就是传说中的三次握手。</h5><p><a href="https://wangyiye.github.io/2019/09/09/浏览器渲染的重排与重绘以及性能优化/3.png" target="_blank" rel="noopener"><img src="https://wangyiye.github.io/2019/09/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/3.png" alt="Image text"></a></p><ul><li>第一次握手：由浏览器发起，告诉服务器我要发送请求了</li><li>第二次握手：由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧</li><li>第三次握手：由浏览器发送，告诉服务器，我马上就发了，准备接受吧</li></ul><h5 id="6-浏览器向服务器发送一条HTTP请求报文。"><a href="#6-浏览器向服务器发送一条HTTP请求报文。" class="headerlink" title="6. 浏览器向服务器发送一条HTTP请求报文。"></a>6. 浏览器向服务器发送一条HTTP请求报文。</h5><h5 id="7-服务器向浏览器返回一条HTTP响应报文。"><a href="#7-服务器向浏览器返回一条HTTP响应报文。" class="headerlink" title="7. 服务器向浏览器返回一条HTTP响应报文。"></a>7. 服务器向浏览器返回一条HTTP响应报文。</h5><ul><li><p>HTTP报文：请求报文+响应报文</p></li><li><p>请求报文 ：所有经过传输协议，客户端传递给服务器的内容<br><a href="https://wangyiye.github.io/2019/09/09/浏览器渲染的重排与重绘以及性能优化/1.png" target="_blank" rel="noopener"><img src="https://wangyiye.github.io/2019/09/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/1.png" alt="Image text"></a></p><ul><li><p>起始行</p></li><li><p>请求首部</p></li><li><p>请求主体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;&lt;headers&gt;&lt;entity-body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>响应报文：所有经过传输协议，服务器返回给客户端的内容<br><a href="https://wangyiye.github.io/2019/09/09/浏览器渲染的重排与重绘以及性能优化/2.png" target="_blank" rel="noopener"><img src="https://wangyiye.github.io/2019/09/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.png" alt="Image"></a></p><ul><li><p>HTTP状态码的信息</p></li><li><p>响应首部</p></li><li><p>响应主体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;version&gt;&lt;status&gt;&lt;reason-phrase&gt;&lt;headers&gt;&lt;entity-body&gt;</span><br></pre></td></tr></table></figure><p>HTTP状态码</p><blockquote><p>1-5开头三位数字</p></blockquote></li><li><p>200 OK</p></li><li><p>201 created一般应用于告诉服务器创建一个新文件，服务器创建成功后返回的状态码</p></li><li><p>204 NO Content 对于某些请求 put delete 请求，服务器拒绝请求，返回空内容，并且以状态码204告知。</p></li><li><p>301 Moved Permanently 永久重定向（永久转移）</p></li><li><p>302 Moved Temporarily 临时转移，现在用307处理，临时重定向Temporary Redirect 主要应用于负载均衡。</p></li><li><p>304 NOT Modified 设置HTTP的协商缓存</p></li><li><p>400 Bad Request 传递给服务器的 参数错误</p></li><li><p>401 Unauthorized 无权限访问</p></li><li><p>404 Not Found 请求地址错误</p></li><li><p>500 Internal Server Error未知服务器错误</p></li><li><p>503 Service Unavailable 服务器超负荷</p></li></ul></li></ul><h5 id="8-关闭连接-浏览器解析文档。"><a href="#8-关闭连接-浏览器解析文档。" class="headerlink" title="8. 关闭连接 浏览器解析文档。"></a>8. 关闭连接 浏览器解析文档。</h5><p><a href="https://wangyiye.github.io/2019/09/09/浏览器渲染的重排与重绘以及性能优化/5.png" target="_blank" rel="noopener"><img src="https://wangyiye.github.io/2019/09/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/5.png" alt="Image text"></a></p><ul><li>第一次挥手：由浏览器发起，发送给服务器，我请求报文发送完了，你准备关闭吧；</li><li>第二次挥手：由服务器发起，告诉浏览器，我接收完请求报文，我准备关闭，你也准备吧；</li><li>第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完毕，你准备关闭吧；</li><li>第四次挥手：由浏览器发起，告诉服务器，我响应报文接收完毕，我准备关闭，你也准备吧；</li></ul><h5 id="9-如果文档中有资源则重复6、7、8动作，直至资源全部加载完毕。"><a href="#9-如果文档中有资源则重复6、7、8动作，直至资源全部加载完毕。" class="headerlink" title="9. 如果文档中有资源则重复6、7、8动作，直至资源全部加载完毕。"></a>9. 如果文档中有资源则重复6、7、8动作，直至资源全部加载完毕。</h5><h3 id="DOM和JavaScript的关系"><a href="#DOM和JavaScript的关系" class="headerlink" title="DOM和JavaScript的关系"></a>DOM和JavaScript的关系</h3><p>文档对象模型（DOM）是一个独立于语言，用于操作XML和HTML文档的API,在web端，我们常用来操作HTML，但其实DOM也是可以操作XML文档的。</p><p>我们现在知道，DOM是一个独立于语言的API，换句话说，DOM是一个与语言无关的API，别的语言也可以实现操作DOM的具体api，但是它在浏览器中是用JavaScript来实现的，也因此，DOM是现在JavaScript编码中很重要的一部分，因为JavaScript很多时候都在操作底层文档。</p><h3 id="为什么操作DOM会很慢"><a href="#为什么操作DOM会很慢" class="headerlink" title="为什么操作DOM会很慢"></a>为什么操作DOM会很慢</h3><p>虽然DOM是由JavaScript实现的，但是在浏览器中都是把DOM和JavaScript分开来实现的，比如IE中，JavaScript的实现名为JScript，放在jscript.dll文件中，而DOM则放在另一个叫做mshtml.dll的库中。在Safari中，DOM和渲染是使用Webkit中的WebCore实现，而JavaScript是由独立的JavaScriptCore引擎实现，同样在Chrome中，同样是使用WebCore来实现渲染，而JavaScript引擎则是他们自己研发的V8引擎。</p><p>由于DOM和JavaScript是被分开独立实现的，因此，每一次在通过js操作DOM的时候，就需要先去连接js和DOM，我们可以这样理解：把DOM和JavaScript比作两个岛，他们之间通过一个收费的桥连接着，每一次访问DOM的时候，就需要经过这座桥，并且给“过路费”，访问的次数越多，路费就会越高，并且访问到DOM后，操作具体的DOM还需要给“操作费”，由于浏览器访问DOM的操作很多，因此，“路费”和“操作费”自然会增加，这就是为什么操作DOM会很慢的原因</p><h3 id="浏览器渲染HTML的步骤"><a href="#浏览器渲染HTML的步骤" class="headerlink" title="浏览器渲染HTML的步骤"></a>浏览器渲染HTML的步骤</h3><p><a href="https://wangyiye.github.io/2019/09/09/浏览器渲染的重排与重绘以及性能优化/4.png" target="_blank" rel="noopener"><img src="https://wangyiye.github.io/2019/09/09/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9A%84%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/4.png" alt="Image text"></a></p><p>HTML渲染大致分为如下几步：</p><ol><li>HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。</li><li>DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。</li><li>节点信息计算(重排)，这个过程被叫做Layout(Webkit)或者Reflow(Mozilla)。即根据渲染树计算每个节点的几何信息(计算它们在设备视口(viewport)内的确切位置和大小)。</li><li>渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面(得到节点的绝对像素)。</li><li>Display:将像素发送给GPU，展示在页面上</li></ol><p>以上5步简述浏览器的一次渲染过程，理论上，每一次的dom更改或者css几何属性更改，都会引起一次浏览器的重排/重绘过程，而如果是css的非几何属性更改，则只会引起重绘过程。所以说重排一定会引起重绘，而重绘不一定会引起重排。</p><h3 id="重排（Relayout-Reflow）"><a href="#重排（Relayout-Reflow）" class="headerlink" title="重排（Relayout/Reflow）"></a>重排（Relayout/Reflow）</h3><p>在弄明白什么是重排之前，我们要知道：浏览器渲染页面默认采用的是流式布局模型（Flow Based Layout），这一点很重要。</p><p>所谓重排，实际上是根据渲染树中每个渲染对象的信息，计算出各自渲染对象的几何信息（DOM对象的位置和尺寸大小），并将其安置在界面中的正确位置。</p><p>由于浏览器渲染界面是基于流式布局模型的，也就是某一个DOM节点信息更改了，就需要对DOM结构进行重新计算，重新布局界面，再次引发回流，只是这个结构更改程度会决定周边DOM更改范围，即全局范围和局部范围，全局范围就是从根节点html开始对整个渲染树进行重新布局，例如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</p><h4 id="在此，总结会引起重排的操作有："><a href="#在此，总结会引起重排的操作有：" class="headerlink" title="在此，总结会引起重排的操作有："></a>在此，总结会引起重排的操作有：</h4><ol><li>页面首次渲染。</li><li>浏览器窗口大小发生改变。</li><li>元素尺寸或位置发生改变。</li><li>元素内容变化（文字数量或图片大小等等）。</li><li>元素字体大小变化。</li><li>添加或者删除可见的DOM元素。</li><li>激活CSS伪类（例如：:hover）。</li><li>设置style属性</li><li>查询某些属性或调用某些方法。</li></ol><blockquote><p>常见引起重排属性和方法<br>width height margin padding<br>display border position overflow<br>clientWidth clientHeight clientTop clientLeft<br>offsetWidth offsetHeight offsetTop offsetLeft<br>scrollWidth scrollHeight scrollTop scrollLeft<br>scrollIntoView() scrollTo() getComputedStyle()<br>getBoundingClientRect() scrollIntoViewIfNeeded()</p></blockquote><blockquote><p>重排也叫回流，实际上，reflow的字面意思也是回流，之所以有的叫做重排，也许是因为重排更好理解，更符合中国人的思维。标准文档之所以叫做回流（Reflow）,是因为浏览器渲染是基于“流式布局”的模型，流实际就使我们常说的文档流，当dom或者css几何属性发生改变的时候，文档流会受到波动联动的去更改，流就好比一条河里的水，回流就好比向河里扔了一块石头，激起涟漪，然后引起周边水流受到波及，所以叫做回流，这样理解似乎更标准更规范，不过叫什么并不重要，重要的是我们真正理解了这个过程便好。</p></blockquote><h3 id="重绘（Repainting）"><a href="#重绘（Repainting）" class="headerlink" title="重绘（Repainting）"></a>重绘（Repainting）</h3><p>相比重排，重绘就简单多了，所谓重绘，就是当页面中元素样式的改变并不影响它在文档流中的位置时，例如更改了字体颜色,浏览器会将新样式赋予给元素并重新绘制的过程称。</p><p>常见引起浏览器绘制过程的属性包含：</p><blockquote><p>color border-style visibility background<br>text-decoration background-image background-position background-repeat<br>outline-color outline outline-style border-radius<br>outline-width box-shadow background-size</p></blockquote><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>我们知道操作DOM是一个高成本的操作，不仅是因为本身js与DOM的链接访问，还包括操作DOM后会引起一连串的连锁反应（重排），因此，从性能优化角度，我们可以从以下几个方面着手：</p><ul><li>减少DOM操作（放弃传统操作dom的时代，基于vue/react开始数据影响视图模式）<ul><li>最小化DOM访问次数，尽量缓存访问DOM的样式信息，避免过度触发回流。</li><li>如果在一个局部方法中需要多次访问同一个dom，则先暂存它的引用。</li></ul></li><li>分离读写操作 （现代的浏览器都有渲染队列的机制）</li><li>采用更优的API替代消费高的api，转换优化消费高的集合<ul><li>用querySelectorAll()替代getElementByXX()。</li><li>开启动画的GPU加速，把渲染计算交给GPU。</li><li>少用HTML集合（类数组）来遍历，因为集合遍历比真数组遍历耗费更高。</li><li>用事件委托来减少事件处理器的数量。</li></ul></li><li>减少重排<ul><li>样式集中改变</li><li>缓存布局信息</li><li>元素批量修改</li><li>避免设置大量的style属性，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow，所以最好是使用class属性</li><li>动画效果应用到position属性为absolute或fixed的元素上（脱离文档流）</li><li>动画实现的速度的选择。比如实现一个动画，以1个像素为单位移动这样最平滑，但是reflow就会过于频繁，大量消耗CPU资源，如果以3个像素为单位移动则会好很多。</li><li>不要使用table布局，因为table中某个元素旦触发了reflow，那么整个table的元素都会触发reflow。那么在不得已使用table的场合，可以设置table-layout:auto;或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围</li></ul></li><li>css及动画处理<ul><li>少用css表达式</li><li>减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</li><li>动画尽量使用在绝对定位或固定定位的元素上；</li><li>隐藏在屏幕外，或在页面滚动时，尽量停止动画；</li></ul></li><li>牺牲平滑度换取速度</li><li>避免table布局和使用css的javascript表达式</li></ul><h4 id="其他优化方案"><a href="#其他优化方案" class="headerlink" title="其他优化方案"></a>其他优化方案</h4><ol><li>减少HTTP请求次数和请求的大小</li></ol><ul><li>文件合并压缩</li><li>雪碧图 css sprite</li><li>图片base64</li><li>尽量使用字体图标</li><li>图片懒加载</li><li>音视频取消预加载</li><li>在客户端和服务器端进行信息交互的时候，对于多项数据我们尽可能基于JSON格式来进行传送（JSON格式的数据处理方便，资源偏小）</li><li>开启服务器端的gzip压缩<br>……</li></ul><ol><li>建立缓存机制</li></ol><ul><li>DNS缓存</li><li>数据缓存（例如：本地存储）</li><li>强缓存 和 协商缓存（304）</li><li>离线存储</li><li>做CDN加速<br>……</li></ul><ol><li>代码上的优化</li></ol><ul><li>减少DOM的重绘和回流</li><li>在JS中尽量减少闭包的使用</li><li>在JS中避免“嵌套循环”和“死循环”</li><li>尽可能使用事件委托</li><li>尽量减少CSS表达式的使用(expression)</li><li>CSS选择器解析规则是从右向左解析</li><li>页面中的数据获取采用异步编程和延迟分批加载</li><li>尽可能实现JS的封装（低耦合高内聚），减少页面中的冗余代码</li><li>尽量减少对于filter滤镜属性的使用</li><li>在CSS导入的时候尽量减少使用@import导入式</li><li>使用window.requestAnimationFrame（JS中的帧动画）代替传统的定时器动画</li><li>减少递归的使用，避免死递归，避免由于递归导致的栈内存嵌套</li><li>基于SCRIPT调取JS的时候，可已使用 defer或者async 来异步加载</li><li>避免使用with语句<br>……</li></ul><h3 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h3><p>本篇文章主要抓取url从输入到最后渲染成界面这一流程中的浏览器解析渲染HTML这一步骤来探讨前端优化的思路和原因，核心思想基于重排和重绘的关系来展开讨论，主题大致有如下几点：</p><ul><li>url从输入到最后渲染的大致环节。</li><li>重排一定会重绘，重绘不一定有重排。</li><li>Js操作DOM是一个高消费过程。</li><li>会引起重排/重绘的属性和方法列举</li><li>优化思路（减少dom操作、替换高性能api、暂存引用、减少重排、开启硬件加速等）。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>